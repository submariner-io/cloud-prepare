/*
SPDX-License-Identifier: Apache-2.0

Copyright Contributors to the Submariner project.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	compute "google.golang.org/api/compute/v1"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// ConfigurePublicIPOnInstance mocks base method.
func (m *MockInterface) ConfigurePublicIPOnInstance(instance *compute.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurePublicIPOnInstance", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigurePublicIPOnInstance indicates an expected call of ConfigurePublicIPOnInstance.
func (mr *MockInterfaceMockRecorder) ConfigurePublicIPOnInstance(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurePublicIPOnInstance", reflect.TypeOf((*MockInterface)(nil).ConfigurePublicIPOnInstance), instance)
}

// DeleteFirewallRule mocks base method.
func (m *MockInterface) DeleteFirewallRule(projectID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallRule", projectID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewallRule indicates an expected call of DeleteFirewallRule.
func (mr *MockInterfaceMockRecorder) DeleteFirewallRule(projectID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRule", reflect.TypeOf((*MockInterface)(nil).DeleteFirewallRule), projectID, name)
}

// DeletePublicIPOnInstance mocks base method.
func (m *MockInterface) DeletePublicIPOnInstance(instance *compute.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicIPOnInstance", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublicIPOnInstance indicates an expected call of DeletePublicIPOnInstance.
func (mr *MockInterfaceMockRecorder) DeletePublicIPOnInstance(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicIPOnInstance", reflect.TypeOf((*MockInterface)(nil).DeletePublicIPOnInstance), instance)
}

// GetFirewallRule mocks base method.
func (m *MockInterface) GetFirewallRule(projectID, name string) (*compute.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRule", projectID, name)
	ret0, _ := ret[0].(*compute.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRule indicates an expected call of GetFirewallRule.
func (mr *MockInterfaceMockRecorder) GetFirewallRule(projectID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRule", reflect.TypeOf((*MockInterface)(nil).GetFirewallRule), projectID, name)
}

// GetInstance mocks base method.
func (m *MockInterface) GetInstance(zone, instance string) (*compute.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", zone, instance)
	ret0, _ := ret[0].(*compute.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockInterfaceMockRecorder) GetInstance(zone, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockInterface)(nil).GetInstance), zone, instance)
}

// InsertFirewallRule mocks base method.
func (m *MockInterface) InsertFirewallRule(projectID string, rule *compute.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFirewallRule", projectID, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFirewallRule indicates an expected call of InsertFirewallRule.
func (mr *MockInterfaceMockRecorder) InsertFirewallRule(projectID, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFirewallRule", reflect.TypeOf((*MockInterface)(nil).InsertFirewallRule), projectID, rule)
}

// InstanceHasPublicIP mocks base method.
func (m *MockInterface) InstanceHasPublicIP(instance *compute.Instance) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceHasPublicIP", instance)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceHasPublicIP indicates an expected call of InstanceHasPublicIP.
func (mr *MockInterfaceMockRecorder) InstanceHasPublicIP(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceHasPublicIP", reflect.TypeOf((*MockInterface)(nil).InstanceHasPublicIP), instance)
}

// ListInstances mocks base method.
func (m *MockInterface) ListInstances(zone string) (*compute.InstanceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", zone)
	ret0, _ := ret[0].(*compute.InstanceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockInterfaceMockRecorder) ListInstances(zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockInterface)(nil).ListInstances), zone)
}

// ListZones mocks base method.
func (m *MockInterface) ListZones() (*compute.ZoneList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListZones")
	ret0, _ := ret[0].(*compute.ZoneList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZones indicates an expected call of ListZones.
func (mr *MockInterfaceMockRecorder) ListZones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZones", reflect.TypeOf((*MockInterface)(nil).ListZones))
}

// UpdateFirewallRule mocks base method.
func (m *MockInterface) UpdateFirewallRule(projectID, name string, rule *compute.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFirewallRule", projectID, name, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFirewallRule indicates an expected call of UpdateFirewallRule.
func (mr *MockInterfaceMockRecorder) UpdateFirewallRule(projectID, name, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirewallRule", reflect.TypeOf((*MockInterface)(nil).UpdateFirewallRule), projectID, name, rule)
}

// UpdateInstanceNetworkTags mocks base method.
func (m *MockInterface) UpdateInstanceNetworkTags(project, zone, instance string, tags *compute.Tags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceNetworkTags", project, zone, instance, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceNetworkTags indicates an expected call of UpdateInstanceNetworkTags.
func (mr *MockInterfaceMockRecorder) UpdateInstanceNetworkTags(project, zone, instance, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceNetworkTags", reflect.TypeOf((*MockInterface)(nil).UpdateInstanceNetworkTags), project, zone, instance, tags)
}
