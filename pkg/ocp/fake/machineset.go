/*
SPDX-License-Identifier: Apache-2.0

Copyright Contributors to the Submariner project.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.43.2. DO NOT EDIT.

package fake

import (
	mock "github.com/stretchr/testify/mock"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockMachineSetDeployer is an autogenerated mock type for the MachineSetDeployer type
type MockMachineSetDeployer struct {
	mock.Mock
}

type MockMachineSetDeployer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMachineSetDeployer) EXPECT() *MockMachineSetDeployer_Expecter {
	return &MockMachineSetDeployer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: machineSet
func (_m *MockMachineSetDeployer) Delete(machineSet *unstructured.Unstructured) error {
	ret := _m.Called(machineSet)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured) error); ok {
		r0 = rf(machineSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMachineSetDeployer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMachineSetDeployer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - machineSet *unstructured.Unstructured
func (_e *MockMachineSetDeployer_Expecter) Delete(machineSet interface{}) *MockMachineSetDeployer_Delete_Call {
	return &MockMachineSetDeployer_Delete_Call{Call: _e.mock.On("Delete", machineSet)}
}

func (_c *MockMachineSetDeployer_Delete_Call) Run(run func(machineSet *unstructured.Unstructured)) *MockMachineSetDeployer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*unstructured.Unstructured))
	})
	return _c
}

func (_c *MockMachineSetDeployer_Delete_Call) Return(_a0 error) *MockMachineSetDeployer_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMachineSetDeployer_Delete_Call) RunAndReturn(run func(*unstructured.Unstructured) error) *MockMachineSetDeployer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: name, namespace
func (_m *MockMachineSetDeployer) DeleteByName(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMachineSetDeployer_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockMachineSetDeployer_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockMachineSetDeployer_Expecter) DeleteByName(name interface{}, namespace interface{}) *MockMachineSetDeployer_DeleteByName_Call {
	return &MockMachineSetDeployer_DeleteByName_Call{Call: _e.mock.On("DeleteByName", name, namespace)}
}

func (_c *MockMachineSetDeployer_DeleteByName_Call) Run(run func(name string, namespace string)) *MockMachineSetDeployer_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMachineSetDeployer_DeleteByName_Call) Return(_a0 error) *MockMachineSetDeployer_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMachineSetDeployer_DeleteByName_Call) RunAndReturn(run func(string, string) error) *MockMachineSetDeployer_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Deploy provides a mock function with given fields: machineSet
func (_m *MockMachineSetDeployer) Deploy(machineSet *unstructured.Unstructured) error {
	ret := _m.Called(machineSet)

	if len(ret) == 0 {
		panic("no return value specified for Deploy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured) error); ok {
		r0 = rf(machineSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMachineSetDeployer_Deploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deploy'
type MockMachineSetDeployer_Deploy_Call struct {
	*mock.Call
}

// Deploy is a helper method to define mock.On call
//   - machineSet *unstructured.Unstructured
func (_e *MockMachineSetDeployer_Expecter) Deploy(machineSet interface{}) *MockMachineSetDeployer_Deploy_Call {
	return &MockMachineSetDeployer_Deploy_Call{Call: _e.mock.On("Deploy", machineSet)}
}

func (_c *MockMachineSetDeployer_Deploy_Call) Run(run func(machineSet *unstructured.Unstructured)) *MockMachineSetDeployer_Deploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*unstructured.Unstructured))
	})
	return _c
}

func (_c *MockMachineSetDeployer_Deploy_Call) Return(_a0 error) *MockMachineSetDeployer_Deploy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMachineSetDeployer_Deploy_Call) RunAndReturn(run func(*unstructured.Unstructured) error) *MockMachineSetDeployer_Deploy_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkerNodeImage provides a mock function with given fields: machineSet, infraID
func (_m *MockMachineSetDeployer) GetWorkerNodeImage(machineSet *unstructured.Unstructured, infraID string) (string, error) {
	ret := _m.Called(machineSet, infraID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkerNodeImage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured, string) (string, error)); ok {
		return rf(machineSet, infraID)
	}
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured, string) string); ok {
		r0 = rf(machineSet, infraID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*unstructured.Unstructured, string) error); ok {
		r1 = rf(machineSet, infraID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMachineSetDeployer_GetWorkerNodeImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkerNodeImage'
type MockMachineSetDeployer_GetWorkerNodeImage_Call struct {
	*mock.Call
}

// GetWorkerNodeImage is a helper method to define mock.On call
//   - machineSet *unstructured.Unstructured
//   - infraID string
func (_e *MockMachineSetDeployer_Expecter) GetWorkerNodeImage(machineSet interface{}, infraID interface{}) *MockMachineSetDeployer_GetWorkerNodeImage_Call {
	return &MockMachineSetDeployer_GetWorkerNodeImage_Call{Call: _e.mock.On("GetWorkerNodeImage", machineSet, infraID)}
}

func (_c *MockMachineSetDeployer_GetWorkerNodeImage_Call) Run(run func(machineSet *unstructured.Unstructured, infraID string)) *MockMachineSetDeployer_GetWorkerNodeImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*unstructured.Unstructured), args[1].(string))
	})
	return _c
}

func (_c *MockMachineSetDeployer_GetWorkerNodeImage_Call) Return(_a0 string, _a1 error) *MockMachineSetDeployer_GetWorkerNodeImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMachineSetDeployer_GetWorkerNodeImage_Call) RunAndReturn(run func(*unstructured.Unstructured, string) (string, error)) *MockMachineSetDeployer_GetWorkerNodeImage_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *MockMachineSetDeployer) List() ([]unstructured.Unstructured, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]unstructured.Unstructured, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []unstructured.Unstructured); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMachineSetDeployer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockMachineSetDeployer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockMachineSetDeployer_Expecter) List() *MockMachineSetDeployer_List_Call {
	return &MockMachineSetDeployer_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockMachineSetDeployer_List_Call) Run(run func()) *MockMachineSetDeployer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMachineSetDeployer_List_Call) Return(_a0 []unstructured.Unstructured, _a1 error) *MockMachineSetDeployer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMachineSetDeployer_List_Call) RunAndReturn(run func() ([]unstructured.Unstructured, error)) *MockMachineSetDeployer_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMachineSetDeployer creates a new instance of MockMachineSetDeployer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMachineSetDeployer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMachineSetDeployer {
	mock := &MockMachineSetDeployer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
